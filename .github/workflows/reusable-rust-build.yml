on:
  workflow_call:
    inputs:
      rust-version:
        type: string
        required: false
        default: stable
      version:
        description: Version to be assigned to the built image
        required: true
        type: string
      cache-version:
        default: 0
        description: Cache version variable to be used to invalidate cache when needed
        required: false
        type: number

env:
  SKIP_WASM_BUILD: 1

jobs:
  build-docker-image:
    name: Build operator Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.rust-version }}
          override: true
          components: rustfmt, clippy
      - uses: arduino/setup-protoc@v2
      
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Cache the Cargo dependencies
        uses: mansagroup/gcs-cache-action@v1.0.3
        with:
          bucket: mangata-node-ci-cache
          path: |
            ${{ github.workspace }}/target
            /usr/local/cargo/git
            /usr/local/cargo/registry
          key: cargo-eigen-clippy-cache-${{ inputs.cache_version }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run sccache-cache only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Set Rust caching env vars only on non-release runs & skip wasm
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
      - name: Lint
        working-directory: mangata-finalizer
        run: |
          cargo fmt --all -- --check
          cargo clippy -- -D warnings
      # - name: Install cargo check tools
        # run: |
          # cargo install --locked cargo-deny || true
          # cargo install --locked cargo-outdated || true
          # cargo install --locked cargo-udeps || true
          # cargo install --locked cargo-audit || true
          # cargo install --locked cargo-pants || true
      # - name: Check
        # working-directory: mangata-finalizer
        # run: |
          # cargo deny check
          # cargo outdated --exit-code 1
          # cargo udeps
          # rm -rf ~/.cargo/advisory-db
          # cargo audit
          # cargo pants
      # - name: Test
      #   working-directory: mangata-finalizer
      #   run: cargo test
      # - name: Run build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --release --manifest-path=mangata-finalizer/Cargo.toml
      # - name: dockerize
      #   working-directory: mangata-finalizer
      #   run: |
      #     docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
      #     docker buildx create --use
      #     docker buildx build --push --platform linux/amd64 -t mangatasolutions/operator:${{ inputs.version }} -f src/bin/Dockerfile .
